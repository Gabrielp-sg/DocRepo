# 1.1 – veja para onde o DNS ACC aponta
dig +short chatbot.acc.lpbr.leaseplan.systems

# 1.2 – pegue o hostname do ALB que o Ingress criou em ACC
kubectl -n chatbot get ing ingress-chatbot -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'; echo

# Compare os dois. Precisam bater.
spec:
  rules:
  - host: chatbot.acc.lpbr.leaseplan.systems
    http:
      paths:
        - path: /product/chatbot/v2/agendamento/
          pathType: Prefix
          backend:
            service:
              name: chatbot-agendamento
              port:
                number: 8080


-- ajuste o LOCATION conforme seu bucket/prefix: plt-elb-logs-596599667803-sa-east-1/alb/...
-- crie a tabela seguindo o template oficial da AWS (Athena > "Create table for ALB access logs")
-- Depois rode algo assim:
SELECT time, elb, request, target_group_arn, user_agent, elb_status_code, target_status_code
FROM alb_access_logs
WHERE request LIKE '%/product/chatbot/v2/agendamento/criar%'
  AND time BETWEEN timestamp '2025-08-25 00:00:00' AND timestamp '2025-08-25 23:59:59'
ORDER BY time DESC
LIMIT 50;


# supondo que você extraiu o TG ARN do log
aws elbv2 describe-target-health --target-group-arn <TG_ARN>

kubectl -n chatbot get pod -o wide | egrep 'chatbot-agendamento|chatbot-atendimento|chatbot-consulta'



# veja envs resolvidos no ACC
kubectl -n chatbot exec deploy/chatbot-agendamento -- env | egrep 'POSTGRES|DB2|SPRING|PROFILE|ENV'

# (opcional) tente resolver o host do banco:
kubectl -n chatbot exec deploy/chatbot-agendamento -- sh -c 'getent hosts "$POSTGRES_SERVICES_URL" || nslookup "$POSTGRES_SERVICES_URL"'

# se tiver psql disponível na imagem (ou instale num pod debug)
# kubectl -n chatbot run -it debug --image=ghcr.io/knabben/psql --rm -- bash
# psql "host=$POSTGRES_SERVICES_URL port=$POSTGRES_SERVICES_PORT dbname=$POSTGRES_SERVICES_DATABASE user=$POSTGRES_SERVICES_USERNAME"



metadata:
  annotations:
    alb.ingress.kubernetes.io/load-balancer-attributes: >-
      routing.http.drop_invalid_header_fields.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=plt-elb-logs-596599667803-sa-east-1,
      access_logs.s3.prefix=alb,
      idle_timeout.timeout_seconds=180,
      routing.http.preserve_host_header.enabled=true


kubectl -n chatbot get externalsecret
kubectl -n chatbot describe externalsecret postgres-services
kubectl -n chatbot get secret postgres-services -o yaml | egrep 'managed-by|owner|annotations'
# conferir se é gerenciado pelo external-secrets e não foi sobrescrito manualmente


SELECT now(), datname, usename, client_addr, application_name, query
FROM pg_stat_activity
WHERE now() - query_start < interval '5 minutes'
ORDER BY query_start DESC
LIMIT 50;
