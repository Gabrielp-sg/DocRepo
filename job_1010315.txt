{
  "msg": "Error mounting /mnt/bradesco/entrada: mount error(13): Permission denied\nRefer to the mount.cifs(8) manual page (e.g. man mount.cifs) and kernel log messages (dmesg)\n",
  "invocation": {
    "module_args": {
      "src": "//10.132.37.102/ENTRADA",
      "path": "/mnt/bradesco/entrada",
      "fstype": "cifs",
      "opts": "vers=3.1.1,credentials=/etc/samba/cred_lpfat,uid=1000,gid=1000",
      "state": "mounted",
      "boot": true,
      "dump": "0",
      "passno": "0",
      "backup": false,
      "fstab": null
    }
  },
  "_ansible_no_log": false,
  "changed": false,
  "item": "ENTRADA",
  "ansible_loop_var": "item",
  "_ansible_item_label": "ENTRADA"
}



- name: Descobrir IP da máquina Windows com fallback
  set_fact:
    win_ip: "{{ hostvars[groups['tag_leaseplan_os_type_windows'][0]]['ec2_private_ip_address'] | default(hostvars[groups['tag_leaseplan_os_type_windows'][0]]['private_ip_address']) | default(hostvars[groups['tag_leaseplan_os_type_windows'][0]]['ansible_host']) }}"
  when: groups['tag_leaseplan_os_type_windows'] is defined



- name: Descobrir IP da máquina Windows no inventory
  set_fact:
    win_ip: "{{ hostvars[groups['tag_leaseplan_os_type_windows'][0]]['ansible_host'] | default(hostvars[groups['tag_leaseplan_os_type_windows'][0]]['inventory_hostname']) }}"
  when: groups['tag_leaseplan_os_type_windows'] is defined and groups['tag_leaseplan_os_type_windows'] | length > 0

- name: Debug - Mostrar IP descoberto
  debug:
    msg: "IP da máquina Windows: {{ win_ip }}"


- name: Descobrir IP da instância Windows via AWS
  set_fact:
    win_ip: "{{ lookup('aws_ec2', 'tag:leaseplan_os_type=windows tag:Environment=' + env_name, region='sa-east-1') | json_query('[0].private_ip_address') }}"


Planning failed. Terraform encountered an error while generating this plan.
╷
│ Error: Invalid value for variable
│ 
│   on ec2.tf line 130, in module "aws_launch_template_lpfat":
│  130:   instance_security_group = {
│  131:     name = format("sgp-%s-%s-asg-lpfat", local.workload_number, local.environment_identifier)
│  132:     ingress_rules = [
│  133:       {
│  134:         from_port                = 8080
│  135:         to_port                  = 8080
│  136:         protocol                 = "tcp"
│  137:         source_security_group_id = module.aws_security_load_balancer.id
│  138:         description              = "Allow inbound HTTP from ALB"
│  139:       }
│  140:     ]
│  141:     egress_rules = [
│  142:       {
│  143:         from_port   = 57222
│  144:         to_port     = 57222
│  145:         protocol    = "tcp"
│  146:         cidr_blocks = ["187.72.125.121/32"]
│  147:       },
│  148:       {
│  149:         from_port                     = 445
│  150:         to_port                       = 445
│  151:         protocol                      = "tcp"
│  152:         destination_security_group_id = ["10.0.0.0/8"]
│  153:         description                   = "Allow SMB (TCP/445) to LPFAT Windows"
│  154:       }
│  155:     ]
│  156:   }
│     ├────────────────
│     │ var.instance_security_group.egress_rules is list of object with 2 elements
│     │ var.instance_security_group.ingress_rules is list of object with 1 element
│ 
│ One of the following must be set cidr_blocks, ipv6_cidr_blocks,
│ prefix_list_ids, self, or source_security_group_id in
│ `instance_security_group.ingress_rules.*` and
│ `instance_security_group.egress_rules.*`.
│ 
│ This was checked by the validation rule at
│ .terraform/modules/aws_launch_template_lpfat/variables.tf:457,3-13.
╵
Cleaning up project directory and file based variables
00:00
ERROR: Job failed: command terminated with exit code 1






│ Error: Cycle: module.ec2_lpfat_windows.var.instance_security_group (validation), module.ec2_lpfat_windows.var.instance_security_group (expand), module.ec2_lpfat_windows.aws_security_group.security_group, module.ec2_lpfat_windows.output.aws_security_group (expand), module.aws_launch_template_lpfat.var.instance_security_group (expand), module.aws_launch_template_lpfat.var.instance_security_group (validation), module.aws_launch_template_lpfat.aws_security_group.security_group, module.aws_launch_template_lpfat.output.aws_security_group (expand)
│ 

// Win
module "awx_win_provision" {

  source = "git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-awx-callback.git?ref=v1.3.0"

  template_id     = "4702"
  os_type         = "windows"
  region          = var.aws_region
  workload_number = local.workload_index
  environment_id  = local.environment_identifier

  #   extra_vars = {
  #     "tasks" = ["install_lpfat_tools"]
  #   }
}

module "ec2_lpfat_windows" {
  source = "git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-instance.git?ref=v5.0.0"

  name                           = format("ec2-%s-%s-sae1-lpfatwin-lp", local.workload_number, local.environment_identifier)
  ami                            = module.shared_data.ami_id.windows.2022.id
  subnet_id                      = module.shared_data.vpc.private_subnets_map["a"].id
  instance_type                  = "t3.small"
  enable_ffm_base_security_group = false
  user_data                      = module.awx_win_provision.user_data

  tags = local.tags_ec2_win

  root_block_device = {
    delete_on_termination = true
    encrypted             = true
    volume_size           = 100
    volume_type           = "gp3"
  }

  iam_role = {
    name = local.iam_role_name
    policy_arns = [
      aws_iam_policy.policy_lpfat_access_s3.arn,
      "arn:aws:iam::${local.account_id}:policy/plt-instance-profile-policy",
      aws_iam_policy.awx_secrets_read.arn
    ]
  }

  instance_security_group = {
    name = local.ec2_sg_name
    ingress_rules = [
      {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["10.0.0.0/8"]
        description = "Allow access from all LP network."
      },
      {
        from_port   = 3389
        to_port     = 3389
        protocol    = "tcp"
        cidr_blocks = ["10.0.0.0/8"]
        description = "Allow access to RDP"
      },
      {
        from_port                 = 445
        to_port                   = 445
        protocol                  = "tcp"
        source_security_group_id  = module.aws_launch_template_lpfat.aws_security_group.id
        description               = "Allow SMB (TCP/445) from LPFAT Linux ASG"
      }
    ]
    egress_rules = [
      {
        from_port   = 0
        to_port     = 0
        protocol    = "all"
        cidr_blocks = ["10.0.0.0/8"]
        description = "Allow access to all LP network."
      }
    ]
  }
}


// Linux
module "awx_provision" {

  source = "git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-awx-callback.git?ref=v1.3.0"

  template_id     = "4702"
  os_type         = "al2"
  region          = var.aws_region
  workload_number = local.workload_index
  environment_id  = local.environment_identifier

  extra_vars = {
    "tasks" = ["install_lpfat_tools"]
  }
}

module "aws_launch_template_lpfat" {
  source = "git::git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-launch-template.git?ref=v5.0.1"

  name                                 = format("lt-%s-%s-sae1-lpfat-01", local.workload_number, local.environment_identifier)
  disable_api_termination              = false
  update_default_version               = true
  instance_initiated_shutdown_behavior = "terminate"
  ebs_optimized                        = true
  instance_type                        = local.instance_type_alb
  image_id                             = "ami-0263eebdb110c0e1e"
  user_data                            = module.awx_provision.user_data

  iam_role = {
    name = format("role-%s-%s-alb-lpfat", local.workload_number, local.environment_identifier)
    policy_arns = [
      aws_iam_policy.policy_lpfat_access_s3.arn,
      "arn:aws:iam::${local.account_id}:policy/plt-instance-profile-policy",
      aws_iam_policy.awx_secrets_read.arn
    ]
  }

  aws_managed_iam_policy_arns = [
    "arn:aws:iam::aws:policy/AmazonS3FullAccess",
    "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
  ]

  metadata_options = {
    http_endpoint = "enabled"
    http_tokens   = "required"
  }

  instance_security_group = {
    name = format("sgp-%s-%s-asg-lpfat", local.workload_number, local.environment_identifier)
    ingress_rules = [
      {
        from_port                = 8080
        to_port                  = 8080
        protocol                 = "tcp"
        source_security_group_id = module.aws_security_load_balancer.id
        description              = "Allow inbound HTTP from ALB"
      }
    ]
    egress_rules = [
      {
        from_port   = 57222
        to_port     = 57222
        protocol    = "tcp"
        cidr_blocks = ["187.72.125.121/32"]
      },
      {
      from_port                  = 445
      to_port                    = 445
      protocol                   = "tcp"
      destination_security_group_id = module.ec2_lpfat_windows.aws_security_group.id
      description                = "Allow SMB (TCP/445) to LPFAT Windows"
    }
    ]
  }

  block_device_mappings = [{
    device_name = "/dev/sda1"
    no_device   = 0
    ebs = {
      volume_type           = "gp3"
      volume_size           = 100
      delete_on_termination = true
      encrypted             = true
      kms_key_id            = module.shared_data.kms_key.arn
  } }]

  tag_specifications = [
    {
      resource_type = "volume"
      tags          = local.tags_lt
    },
    {
      resource_type = "instance"
      tags          = local.tags_lt
    }
  ]
  tags = local.tags
}

module "aws_autoscaling_lpfat" {
  source = "git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-autoscaling-group.git?ref=v5.0.0"

  name             = format("asg-%s-%s-sae1-lpfat-01", local.workload_number, local.environment_identifier)
  min_size         = local.min_size
  max_size         = local.max_size
  desired_capacity = local.desired_capacity

  health_check_type   = "EC2"
  vpc_zone_identifier = module.shared_data.vpc.private_subnet_ids
  target_group_arns   = [module.aws_alb_lpfat.lb_target_groups.tg-p.arn]

  launch_template = {
    id      = module.aws_launch_template_lpfat.launch_template_id
    version = module.aws_launch_template_lpfat.launch_template_latest_version
  }

  depends_on = [module.aws_launch_template_lpfat]

  tags = local.tags

  instance_refresh = {
    strategy = "Rolling"
    preferences = {
      checkpoint_delay       = 600
      instance_warmup        = 300
      min_healthy_percentage = 50
    }
  }
}


module "aws_alb_lpfat" {
  source = "git@gitlab.core-services.leaseplan.systems:shared/terraform_modules/aws/aws-alb.git?ref=v5.0.1"

  name            = format("alb-%s-%s-sae1-lpfat-lb01", local.workload_number, local.environment_identifier)
  subnets         = module.shared_data.vpc.private_subnet_ids
  security_groups = [module.aws_security_load_balancer.id]
  certificate_arn = aws_acm_certificate.acm_internal[0].arn
  internal        = true

  targets = [
    {
      name              = "tg-p"
      port              = 8080
      type              = "instance"
      listener_protocol = "HTTP"
      target_protocol   = "HTTP"
      rules             = []

      stickiness = {
        type            = "lb_cookie"
        cookie_duration = "86400" #1day
      }
    }


  ]
  https_listener = {
    type              = "forward"
    port              = 443
    target_group_name = "tg-p"
    ssl_policy        = "ELBSecurityPolicy-TLS13-1-2-2021-06"
  }

  tags = local.tags
}

