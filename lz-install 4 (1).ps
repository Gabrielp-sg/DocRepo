# Script to install all required Landing Zone tools 

# setup folders 
# cd c:\ 
$installdir = "C:\LZapps\"
$zipdir     = "C:\LZapps\Zipfolder\"
$extractdir = "C:\LZapps\Extracted\"
$windir     = "C:\Windows\"
$psdir      = "C:\LZapps\PowershellModules\"
New-Item -ItemType Directory -Path $installdir, $zipdir, $extractdir, $psdir -Force


#####################################################################################################################
# install prerequisites 
#####################################################################################################################
# Install 7zip in order to successfully expand archive. 
# Define the URL for the 7-Zip installer
$installerUrl = "https://www.7-zip.org/a/7z1900-x64.exe"
$installerPath = "C:\Temp\7z1900-x64.exe"
# Create a temporary directory for the installer
if (-not (Test-Path -Path "C:\Temp")) {
    New-Item -ItemType Directory -Path "C:\Temp"
}
# Download the 7-Zip installer
Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
# Run the installer silently
Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
# Verify the installation
$sevenZipPath = "C:\Program Files\7-Zip\7z.exe"
if (Test-Path -Path $sevenZipPath) {
    Write-Output "7-Zip has been successfully installed."
} else {
    Write-Output "7-Zip installation failed."
}
# Clean up the installer
Remove-Item -Path $installerPath -Force
# powershell.exe -NoLogo -NoProfile -Command '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Install-Module -Name PackageManagement -Force -MinimumVersion 1.4.6 -Scope CurrentUser -AllowClobber -Repository PSGallery'
# old version on package manager on AWS Windows Workspace.
# download the amd64 package from https://gitlab.core-services.leaseplan.systems/shared/lz/lzt/-/packages/1151
# Move the .exe file to C:\Windows\System32 and rename it to either lz or lzt.exe
# open new Windows PowerShell Terminal and test lzt --help
# Create pip folder and pip.ini file in order to not get SSL error upon downloading python packages
# Define the directory and file path
$directory = "C:\ProgramData\pip"
$filePath = "$directory\pip.ini"
# Check if the directory does not exist and create it
if (-Not (Test-Path $directory)) {
    New-Item -ItemType Directory -Path $directory
}
# Create the pip.ini file and add the required content
#$content = @"
#[global]
#trusted-host = pypi.python.org
#               pypi.org
#               files.pythonhosted.org
#"@
# Write the content to the pip.ini file
#$content | Out-File -FilePath $filePath -Encoding ASCII
# Optional: Verify the file content
#Get-Content $filePath
# nuget required to install git 
Write-Host  "install NuGet" -ForegroundColor magenta 
# https://dist.nuget.org/win-x86-commandline/latest/nuget.exe 
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 # fixes above 
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force   # FIXED 
Import-Module PowerShellGet # import to system 

Write-Host  "install dependencies" -ForegroundColor magenta 
Save-Module -Name NuGet -path $psdir
Save-Module -Name PowerShellGet -path $psdir
Copy-Item -Path $psdir\NuGet -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force
Copy-Item -Path $psdir\PackageManagement -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force 
Copy-Item -Path $psdir\PowerShellGet -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force
Install-Module -Name NuGet -Force -Scope AllUsers
Install-Module -Name PackageManagement -Force -Scope AllUsers 
Install-Module -Name PowerShellGet -Force -Scope AllUsers
Update-Module -Name PackageManagement -Force # can't install or update, already installed 
Update-Module -Name PowerShellGet -Force # can't install or update, already installed 
Import-Module PowerShellGet


#####################################################################################################################
# install vscode editor 
#####################################################################################################################
Write-Host  "install VScode" -ForegroundColor magenta 
# $source_vscode = "https://code.visualstudio.com/docs/?dv=win64"
$source_vscode = "https://vscode.download.prss.microsoft.com/dbazure/download/stable/e170252f762678dec6ca2cc69aba1570769a5d39/VSCodeUserSetup-x64-1.88.1.exe"
$output_vscode = "$installdir\VSCodeUserSetup-x64-1.88.1.exe"
Invoke-WebRequest -uri $source_vscode -OutFile $output_vscode   # doesn't appear to download 
# $install_ssm = "$output_ssm /install /quiet /norestart"
Invoke-command -ScriptBlock {C:\LZapps\VSCodeUserSetup-x64-1.88.1.exe /verysilent /norestart /forcecloseapplications /norestartapplications}
#Invoke-command -ScriptBlock {%USERPROFILE%\Downloads\VSCodeUserSetup-x64-1.88.1.exe /verysilent /norestart /forcecloseapplications /norestartapplications}


#####################################################################################################################
# install git 
#####################################################################################################################
Write-Host  "install PostGit" -ForegroundColor magenta  
# https://github.com/dahlbyk/posh-git
Save-Module -Name posh-git -path $psdir
Copy-Item -Path $psdir\posh-git -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force
# Install-Module posh-git -Scope AllUsers -Force   # need to install for system 
# (A) You've never installed posh-git from the PowerShell Gallery
PowerShellGet\Install-Module posh-git -Scope CurrentUser -Force
Add-PoshGitToProfile -AllHosts
Get-Module -ListAvailable
Write-Host  "install git" -ForegroundColor magenta 
$source_git = "https://github.com/git-for-windows/git/releases/download/v2.44.0.windows.1/Git-2.44.0-64-bit.exe"
$output_git = "C:\LZapps\Git-2.44.0-64-bit.exe"
Invoke-WebRequest $source_git -OutFile $output_git 
Invoke-command -ScriptBlock {C:\LZapps\Git-2.44.0-64-bit.exe /verysilent /norestart}
# need to add to user setup script <-------------------------------------------------------------------
# git config username "My Username"
# git config email "MyEmailAddress@Leaseplan.com"
# git config --global user.email fname.lname@leaseplan.com

#####################################################################################################################
# Install TFFLICK in order to be able to change terraform versions with just tfflick x.x.x 
#####################################################################################################################
# Eliminate all instances of terraform.exe from all paths
Get-ChildItem -Path C:\ -Filter "terraform.exe" -Recurse -ErrorAction SilentlyContinue -Force | ForEach-Object {
    Remove-Item -Path $_.FullName -Force
    Write-Output "Removed terraform.exe from $($_.FullName)"
}
# Download the tfflick module
$downloadUrl = "https://github.com/ggaacode/tfflick/archive/refs/tags/v0.1.3.zip"
$downloadPath = "C:\LZapps\tfflick.zip"
Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath
Write-Output "Downloaded tfflick module to $downloadPath"
# Unzip the tfflick module
$unzipPath = "C:\LZapps\tfflick"
Expand-Archive -Path $downloadPath -DestinationPath $unzipPath -Force
Write-Output "Unzipped tfflick module to $unzipPath"
# Modify the .psm1 file to change $env:USERPROFILE to "C:\Windows"
$psm1Path = Get-ChildItem -Path $unzipPath -Filter "*.psm1" -Recurse | Select-Object -First 1 -ExpandProperty FullName
(Get-Content $psm1Path) -replace '\$env:USERPROFILE', '"C:\Windows"' | Set-Content -Path $psm1Path
Write-Output "Modified $psm1Path to set homedir to C:\Windows"
# Copy the tfflick folder to PowerShell modules paths
$modulePaths = $env:PSModulePath -split ";"
foreach ($modulePath in $modulePaths) {
    $destinationPath = Join-Path -Path $modulePath -ChildPath "tfflick"
    Copy-Item -Path $unzipPath -Destination $destinationPath -Recurse -Force
    Write-Output "Copied tfflick module to $destinationPath"
}
# Create folder C:\Windows\.tfflick
$folderPath = "C:\Windows\.tfflick"
if (-Not (Test-Path $folderPath)) {
    New-Item -ItemType Directory -Path $folderPath
    Write-Output "Created folder $folderPath"
}
# Add C:\Windows\.tfflick to the PATH environment variable for both user and machine
$existingMachinePath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
if ($existingMachinePath -notcontains $folderPath) {
    [System.Environment]::SetEnvironmentVariable("Path", $existingMachinePath + ";" + $folderPath, "Machine")
    Write-Output "Added $folderPath to Machine PATH"
}
$existingUserPath = [System.Environment]::GetEnvironmentVariable("Path", "User")
if ($existingUserPath -notcontains $folderPath) {
    [System.Environment]::SetEnvironmentVariable("Path", $existingUserPath + ";" + $folderPath, "User")
    Write-Output "Added $folderPath to User PATH"
}
# Refresh environment variables in the current session
$env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
# Run tfflick to install terraform version 1.8.1
Start-Process -NoNewWindow -FilePath "powershell" -ArgumentList "tfflick 1.8.1" -Wait
Write-Output "Ran tfflick to install terraform version 1.8.1"
# Verify the terraform version
terraform --version

#####################################################################################################################
# install vault 
#####################################################################################################################
Write-Host  "install vault" -ForegroundColor magenta 
$source_vault = "https://releases.hashicorp.com/vault/1.16.1/vault_1.16.1_windows_386.zip"
$zip_vault = "$zipdir\vault_1.16.1_windows_386.zip"
Invoke-WebRequest $source_vault -OutFile $zip_vault
Expand-Archive -Path $zip_vault -DestinationPath $extractdir -force 
copy-Item "$extractdir\vault.exe" -Destination $windir -force
[System.Environment]::SetEnvironmentVariable("VAULT_ADDR","https://vault.core-services.leaseplan.systems",[System.EnvironmentVariableTarget]::Machine)
vault -version 


#####################################################################################################################
# install aws cli  client 
#####################################################################################################################
Write-Host  "install awscli" -ForegroundColor magenta  
# msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi /quiet /norestart
$source_awscli = "https://awscli.amazonaws.com/AWSCLIV2.msi"
$output_awscli = "C:\LZapps\AWSCLIV2.msi"
Invoke-WebRequest $source_awscli -OutFile $output_awscli 
Invoke-command -ScriptBlock {msiexec.exe /i C:\LZapps\AWSCLIV2.msi /quiet /norestart}
# after about 30 seconds the aws cmd worked 
Start-Sleep 30 
New-Item -Item File -Path $env:USERPROFILE/.aws/credentials -Force
aws --version 


#####################################################################################################################
# install aws cli session manager 
#####################################################################################################################
# https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html#install-plugin-verify
Write-Host  "install aws session manager" -ForegroundColor magenta 
$source_ssm = "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/windows/SessionManagerPluginSetup.exe"
$output_ssm = "$installdir\SessionManagerPluginSetup.exe"
Invoke-WebRequest $source_ssm -OutFile $output_ssm
Invoke-command -ScriptBlock {C:\LZapps\SessionManagerPluginSetup.exe /install /quiet /norestart} 
# $install_ssm = "$output_ssm /install /quiet /norestart"
# start-Process $output_ssm  /install /quiet /norestart
$env:AWS_DEFAULT_REGION = 'eu-west-1'
$env:AWS_DEFAULT_REGION
# aws ssm start-session --target instance-id
session-manager-plugin --version  # successfully runs in a new terminal 
#  installs here C:\Program Files\Amazon\SessionManagerPlugin

#####################################################################################################################
# install AWS Tools for PowerShell on Windows
#####################################################################################################################
# https://docs.aws.amazon.com/powershell/latest/userguide/pstools-getting-set-up-windows.html
# https://docs.aws.amazon.com/powershell/latest/userguide/pstools-getting-set-up-windows.html#ps-installing-awswindowspowershell

Write-Host  "install AWS Tools for PowerShell" -ForegroundColor magenta 
#  This method of installing AWSPowerShell (MSI) is deprecated and we recommend that you use Install-Module instead.
# $source_vscode = "https://sdk-for-net.amazonwebservices.com/latest/AWSToolsAndSDKForNet.msi"
# $output_vscode = "$installdir\AWSToolsAndSDKForNet.msi"
# Invoke-WebRequest -uri $source_vscode -OutFile $output_vscode   
# Invoke-command -ScriptBlock {C:\LZapps\AWSToolsAndSDKForNet.msi /verysilent /norestart }

Save-Module -Name AWSPowerShell -path $psdir
# PowerShell uses certain folders when a module is used
$env:PSModulePath -split ';'
# copy to powershell system folder 
Copy-Item -Path $psdir\AWSPowerShell -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force
Install-Module -Name AWSPowerShell -Force -SkipPublisherCheck -Scope AllUsers

# To load the AWS Tools for PowerShell modules, you must enable PowerShell script execution.
Set-ExecutionPolicy RemoteSigned 
Get-Module -ListAvailable
Get-AWSPowerShellVersion
Get-AWSPowerShellVersion -ListServiceVersionInfo
$PSVersionTable
Import-Module AWSPowerShell


#####################################################################################################################
# install python currently deprecated for Windows.
#####################################################################################################################
# PowerShell script to install Python 3.7.7 and configure environment variables
# Define installation parameters
#$pythonVersion = "3.7.7"
#$installerUrl = "https://www.python.org/ftp/python/$pythonVersion/python-$pythonVersion-amd64.exe"
#$installDir = "C:\Python$pythonVersion"
#$installerPath = "$env:TEMP\python-$pythonVersion-amd64.exe"
## Download the Python installer
##Write-Host "Downloading Python $pythonVersion installer..."
#Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
## Install Python with administrative rights
#Write-Host "Installing Python $pythonVersion as Administrator..."
#Start-Process -FilePath $installerPath -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1 TargetDir=$installDir" -Wait -NoNewWindow
## Verify installation
#$pythonExePath = "$installDir\python.exe"
#if (Test-Path $pythonExePath) {
#    Write-Host "Python $pythonVersion installed successfully at $installDir"
#    # Check if pip is installed
#    & $pythonExePath -m pip --version
#} else {
#    Write-Host "Failed to install Python $pythonVersion"
#}
## Install pip if missing
#if (-not (& $pythonExePath -m pip --version)) {
#    Write-Host "pip is not installed, attempting to install pip..."
#    $getPath = "$env:TEMP\get-pip.py"
#    $getUrl = "https://bootstrap.pypa.io/get-pip.py"
#    Invoke-WebRequest -Uri $getUrl -OutFile $getPath
#    & $pythonExePath $getPath
#}
## Install other required packages
#& $pythonExePath -m pip install pyenv-win pipenv pipx
## Configure pipx
#& pipx ensurepath
## Set up environment variables
#$pythonPath = "$installDir;$installDir\Scripts"
#[System.Environment]::SetEnvironmentVariable("PYTHONHOME", $installDir, "Machine")
#$envPath = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
#if (-not $envPath.Contains($installDir)) {
#    [System.Environment]::SetEnvironmentVariable("Path", "$envPath;$pythonPath", "Machine")
#}
## Setup PYENV environment variables
#$pyenvTarget = "$env:USERPROFILE\.pyenv"
#$env:PYENV = "$pyenvTarget\pyenv-win"
#$env:PYENV_ROOT = $env:PYENV
#$env:PYENV_HOME = $env:PYENV
#[System.Environment]::SetEnvironmentVariable('PYENV', $env:PYENV, "User")
#[System.Environment]::SetEnvironmentVariable('PYENV_ROOT', $env:PYENV_ROOT, "User")
#[System.Environment]::SetEnvironmentVariable('PYENV_HOME', $env:PYENV_HOME, "User")
#$envPathUser = [System.Environment]::GetEnvironmentVariable("Path", "User")
#$pyenvPath = "$env:PYENV\bin;$env:PYENV\shims"
#[System.Environment]::SetEnvironmentVariable('Path', "$envPathUser;$pyenvPath", "User")
## Refresh environment variables
#$env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine")
#$env:PYTHONHOME = [System.Environment]::GetEnvironmentVariable("PYTHONHOME", "Machine")
#$env:PYENV = [System.Environment]::GetEnvironmentVariable("PYENV", "User")
#$env:PYENV_ROOT = [System.Environment]::GetEnvironmentVariable("PYENV_ROOT", "User")
#$env:PYENV_HOME = [System.Environment]::GetEnvironmentVariable("PYENV_HOME", "User")
## Verify installations
#Write-Host "Verifying installations..."
#python -m pip install --upgrade pip
#pip install emoji
#& $pythonExePath --version
#& $pythonExePath -m pip --version
#& $pythonExePath -m pip list

#####################################################################################################################
# install gossm 
#####################################################################################################################
# Define the extraction directory and download directory
$extractdir = "$env:TEMP\gossm_extracted"
$zipdir = "$env:TEMP"
# Ensure the directories exist
if (-Not (Test-Path $extractdir)) {
    New-Item -ItemType Directory -Path $extractdir
}
if (-Not (Test-Path $zipdir)) {
    New-Item -ItemType Directory -Path $zipdir
}
# Fetch the latest gossm release from GitHub
$githubApiUrl = "https://api.github.com/repos/gjbae1212/gossm/releases/latest"
try {
    $latestRelease = Invoke-RestMethod -Uri $githubApiUrl
    $latestAsset = $latestRelease.assets | Where-Object { $_.name -like "*Windows_x86_64.tar.gz" }
    $url_gossm = $latestAsset.browser_download_url
    $zip_gossm = Join-Path $zipdir $latestAsset.name
} catch {
    Write-Host "Failed to fetch latest gossm release. Please check your network connection." -ForegroundColor Magenta
    return
}
# Download the latest release
Write-Host "Downloading gossm" -ForegroundColor Magenta
Invoke-WebRequest -Uri $url_gossm -OutFile $zip_gossm
# Path to 7-Zip executable
$sevenZipPath = "C:\Program Files\7-Zip\7z.exe"
# Extract the tar.gz file using 7-Zip
Write-Host "Extracting gossm using 7-Zip" -ForegroundColor Magenta
& $sevenZipPath x $zip_gossm "-o$extractdir" -y
# Correctly determine the tar file name
$tarFileName = $latestAsset.name -replace '\.gz$', ''
$tarPath = Join-Path $extractdir $tarFileName
# Check if tar file exists before attempting to extract
if (Test-Path $tarPath) {
    Write-Host "Extracting the nested tar file using 7-Zip" -ForegroundColor Magenta
    & $sevenZipPath x $tarPath "-o$extractdir" -y
} else {
    Write-Host "ERROR: The expected tar file does not exist - $tarPath" -ForegroundColor Magenta
    return
}
# Check if gossm.exe exists and copy it to the Windows directory
if (Test-Path "$extractdir\gossm.exe") {
    Write-Host "Copying gossm.exe to Windows directory" -ForegroundColor Green
    Copy-Item "$extractdir\gossm.exe" -Destination $env:windir -Force
} else {
    Write-Host "Extraction failed, gossm.exe not found." -ForegroundColor Magenta
    return
}
# Optionally, add gossm to the system PATH if not already included
$gossmPath = "$env:windir\gossm.exe"
if (!(Get-Command gossm -ErrorAction SilentlyContinue)) {
    $path = [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine)
    if (-not $path.Contains($env:windir)) {
        [Environment]::SetEnvironmentVariable("Path", "$path;$env:windir", [EnvironmentVariableTarget]::Machine)
    }
}
# Verifying installation
try {
    Write-Host "Verifying gossm installation..." -ForegroundColor Cyan
    & $gossmPath --version
    Write-Host "gossm installation verified successfully." -ForegroundColor Green
} catch {
    Write-Host "gossm is not correctly installed or not found in PATH." -ForegroundColor Magenta
}

#####################################################################################################################
# install openssh 
#####################################################################################################################
# https://www.powershellgallery.com/packages/WinSSH/0.9.8
# https://github.com/pldmgg/WinSSH
Write-Host  "install openssh" -ForegroundColor magenta 
# devices not Windows 10 or Server 2019 
# cd $HOME
# $url_openssh  = "https://github.com/PowerShell/Win32-OpenSSH/releases/download/V8.6.0.0p1-Beta/OpenSSH-Win64.zip"
# $zip_openssh  = "$installdir\ZipFolder\OpenSSH-Win64.zip"
# Invoke-WebRequest -Uri $url_openssh -OutFile $zip_openssh
# Expand-Archive -Path $zip_openssh -DestinationPath $extractdir -force 
# Start-Process $extractdir
# $script = "$extractdir\OpenSSH-Win64\install-sshd.ps1"
# powershell.exe -ExecutionPolicy Bypass -File $script 
# New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
# Set-Service sshd -StartupType Automatic
# ssh

# https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse#install-openssh-using-windows-settings
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
# Install the OpenSSH Server
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
# New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
# Start the sshd service
Start-Service sshd
# OPTIONAL but recommended:
Set-Service -Name sshd -StartupType 'Automatic'
# Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify
if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) 
    {
        Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
        New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
    } 
    else 
    {
        Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
    }
ssh -V

#####################################################################################################################
# install Fuzzy Finder (fzf)
##################################################################################################################### 
# https://github.com/junegunn/fzf#windows 
Write-Host "Installing fuzzy finder" -ForegroundColor magenta
$url_fzf  = "https://github.com/junegunn/fzf/releases/download/0.29.0/fzf-0.29.0-windows_amd64.zip"
$zip_fzf  = "$zipdir\fzf-0.29.0-windows_amd64.zip"
Invoke-WebRequest -Uri $url_fzf -OutFile $zip_fzf
Expand-Archive -Path $zip_fzf -DestinationPath $extractdir -Force
$targetPath = "C:\Program Files\fzf"
New-Item -ItemType Directory -Path $targetPath -Force
Copy-Item "$extractdir\fzf.exe" -Destination $targetPath -Force
# Add fzf to the system PATH
[Environment]::SetEnvironmentVariable("Path", [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine) + ";$targetPath", [EnvironmentVariableTarget]::Machine)
# Installation of PSFzf PowerShell module
Write-Host "Installing PSFzf module" -ForegroundColor magenta
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Install-Module -Name PSFzf -Force -Scope AllUsers
# Output final status message
Write-Host "Installation complete." -ForegroundColor Green
fzf --version 

#####################################################################################################################.    might be a copy from line 351
# install PSFzf module 
#####################################################################################################################
# https://www.powershellgallery.com/packages/PSFzf/2.0.0
# WARNING: User declined to install untrusted module (PSFzf).
# Program Files\WindowsPowerShell\Modules\PSFzf\2.2.9\  installs module here 
# Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Write-Host  "install PSfzf" -ForegroundColor magenta 
Save-Module -Name PSfzf -path $psdir
Copy-Item -Path $psdir\PSfzf -Destination "C:\Program Files\WindowsPowerShell\Modules" -Force
Install-Module -Name PSfzf -Force -Scope AllUsers

#####################################################################################################################. might need to find other source without pip 
# install ansible 
#####################################################################################################################
# NOTE Python and PIP must be installed 
# c:\python37\python.exe pip install --upgrade pip 
Write-Host  "install ansible" -ForegroundColor magenta 
# fix long path error     https://pip.pypa.io/warnings/enable-long-paths 
New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
-Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force 
$ansible_folder = "C:\LZapps\ansible"
New-Item -Item Directory -Path $ansible_folder -Force
pip download -d $ansible_folder ansible
pip install ansible --src $ansible_folder --force-reinstall 


#####################################################################################################################
# Install Docker Desktop 
#####################################################################################################################
Write-Host "Preparing to install Docker Desktop" -ForegroundColor magenta
# Ensure Hyper-V and Containers Windows features are enabled.
$features = @("Microsoft-Hyper-V", "Containers")
foreach ($feature in $features) {
    if (-not (Get-WindowsOptionalFeature -FeatureName $feature -Online).State -eq "Enabled") {
        Enable-WindowsOptionalFeature -Online -FeatureName $feature -All -NoRestart
    }
}
# Check and download Docker Desktop Installer
$url_docker  = "https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe"
$exe_docker  = "$installdir\Docker Desktop Installer.exe"
try {
    Invoke-WebRequest -Uri $url_docker -OutFile $exe_docker
    Write-Host "Docker Desktop installer downloaded." -ForegroundColor Green
} catch {
    Write-Host "Failed to download Docker Desktop installer. Please check your network or contact IT support." -ForegroundColor magenta
    return
}
# Installing Docker Desktop
try {
    Write-Host "Installing Docker Desktop... Please follow the on-screen instructions." -ForegroundColor Cyan
    Start-Process -FilePath $exe_docker -ArgumentList "install --quiet" -Wait -NoNewWindow
} catch {
    Write-Host "Failed to start Docker Desktop installation. Please ensure the installer exists and is accessible." -ForegroundColor magenta
}
docker version 
docker run hello-world
